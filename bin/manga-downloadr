#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'optparse'

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: manga-downloadr [options]"

  opts.on("-u URL", "--url URL",
    "Full MangaReader.net manga homepage URL - required") do |v|
    options[:url] = v
  end

  opts.on("-n NAME", "--name NAME",
    "slug to be used for the sub-folder to store all manga files - required") do |n|
    options[:name] = n
  end

  opts.on("-d DIRECTORY", "--directory DIRECTORY",
    "main folder where all mangas will be stored - required") do |d|
    options[:directory] = d
  end

  opts.on('-v VOLUME', '--volume VOLUME',
    'volume to be downloaded (based on pages per volume)') do |v|
    options[:volume] = v
  end

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  ARGV << "-h" if ARGV.empty?
  option_parser.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.print "Error: " + $! + "\n"
  exit
end

require 'manga-downloadr'
generator = MangaDownloadr::Workflow.create(options[:url], options[:name], options[:directory], options)
unless generator.state?(:chapter_urls)
  puts "Massive parallel scanning of all chapters "
  generator.fetch_chapter_urls!
end
unless generator.state?(:page_urls)
  puts "\nMassive parallel scanning of all pages "
  generator.fetch_page_urls!
end
unless generator.state?(:image_urls)
  puts "\nMassive parallel scanning of all images "
  generator.fetch_image_urls!
  puts "\nTotal page links found: #{generator.chapter_pages_count}"
end
unless generator.state?(:images)
  puts "\nMassive parallel download of all page images "
  generator.fetch_images!
end
puts "\nCompiling all images into PDF volumes "
generator.compile_ebooks!
puts "\nProcess finished."
